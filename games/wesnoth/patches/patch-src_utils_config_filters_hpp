Index: src/utils/config_filters.hpp
--- src/utils/config_filters.hpp.orig
+++ src/utils/config_filters.hpp
@@ -40,8 +40,8 @@ bool bool_matches_if_present(const config& filter, con
  *
  * Always returns true if the filter puts no restriction on the value of @a cfg[@a attribute].
  */
-bool double_matches_if_present(const config& filter, const config& cfg, const std::string& attribute, std::optional<double> def = NULL);
-bool int_matches_if_present(const config& filter, const config& cfg, const std::string& attribute, std::optional<int> def = NULL);
+bool double_matches_if_present(const config& filter, const config& cfg, const std::string& attribute, std::optional<double> def = 0);
+bool int_matches_if_present(const config& filter, const config& cfg, const std::string& attribute, std::optional<int> def = 0);
 
 /**
  * Restricts filters to only looking for values that are zero or more.
@@ -62,7 +62,7 @@ bool unsigned_matches_if_present(const config& filter,
  * The function is named "negative" in case we later want to add a "reciprocal" for the "multiply"/"divide" pair.
  */
 bool int_matches_if_present_or_negative(
-	const config& filter, const config& cfg, const std::string& attribute, const std::string& opposite, std::optional<int> def = NULL);
+	const config& filter, const config& cfg, const std::string& attribute, const std::string& opposite, std::optional<int> def = 0);
 
 bool string_matches_if_present(
 	const config& filter, const config& cfg, const std::string& attribute, const std::string& def);
