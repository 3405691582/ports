Index: common/import_gfx/dxf_import_plugin.cpp
--- common/import_gfx/dxf_import_plugin.cpp.orig
+++ common/import_gfx/dxf_import_plugin.cpp
@@ -41,6 +41,9 @@
 #include <board.h>
 #include "common.h"
 
+#ifdef __BSD_VISIBLE
+#undef __BSD_VISIBLE
+#endif
 
 /*
  * Important notes
@@ -629,7 +632,7 @@ void DXF_IMPORT_PLUGIN::addEllipse( const DL_EllipseDa
     // For now, we assume ellipses in the XY plane.
 
     VECTOR2D center( mapX( centerCoords.x ), mapY( centerCoords.y ) );
-    VECTOR2D major( mapX( majorCoords.x ), mapY( majorCoords.y ) );
+    VECTOR2D vmajor( mapX( majorCoords.x ), mapY( majorCoords.y ) );
 
     // DXF elliptical arcs store their angles in radians (unlike circular arcs which use degrees)
     // The arcs wind CCW as in KiCad.  The end angle must be greater than the start angle, and if
@@ -645,7 +648,7 @@ void DXF_IMPORT_PLUGIN::addEllipse( const DL_EllipseDa
 
     if( aData.ratio == 1.0 )
     {
-        double radius = major.EuclideanNorm();
+        double radius = vmajor.EuclideanNorm();
 
         if( startAngle == endAngle )
         {
@@ -656,8 +659,8 @@ void DXF_IMPORT_PLUGIN::addEllipse( const DL_EllipseDa
         else
         {
             // Angles are relative to major axis
-            startAngle -= EDA_ANGLE( major );
-            endAngle -= EDA_ANGLE( major );
+            startAngle -= EDA_ANGLE( vmajor );
+            endAngle -= EDA_ANGLE( vmajor );
 
             DL_ArcData arc( aData.cx, aData.cy, aData.cz, radius, startAngle.AsDegrees(),
                             endAngle.AsDegrees() );
@@ -669,7 +672,7 @@ void DXF_IMPORT_PLUGIN::addEllipse( const DL_EllipseDa
     // TODO: testcases for negative extrusion vector; handle it here
 
     std::vector<BEZIER<double>> splines;
-    ELLIPSE<double> ellipse( center, major, aData.ratio, startAngle, endAngle );
+    ELLIPSE<double> ellipse( center, vmajor, aData.ratio, startAngle, endAngle );
 
     TransformEllipseToBeziers( ellipse, splines );
 
@@ -683,8 +686,8 @@ void DXF_IMPORT_PLUGIN::addEllipse( const DL_EllipseDa
         bufferToUse->AddSpline( b.Start, b.C1, b.C2, b.End, lineWidth );
 
     // Naive bounding
-    updateImageLimits( center + major );
-    updateImageLimits( center - major );
+    updateImageLimits( center + vmajor );
+    updateImageLimits( center - vmajor );
 }
 
 
