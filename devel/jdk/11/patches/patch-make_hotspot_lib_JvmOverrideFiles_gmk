Fix optimization levels for clang-16

Index: make/hotspot/lib/JvmOverrideFiles.gmk
--- make/hotspot/lib/JvmOverrideFiles.gmk.orig
+++ make/hotspot/lib/JvmOverrideFiles.gmk
@@ -227,30 +227,32 @@ else ifeq ($(OPENJDK_TARGET_OS), bsd)
         unsafe.cpp \
         #
 
-    ifneq ($(DEBUG_LEVEL), slowdebug)
-      # needed for clang 13
-      BUILD_LIBJVM_synchronizer.cpp_CXXFLAGS := -O1
+    # needed for clang 13/16
+    BUILD_LIBJVM_synchronizer.cpp_CXXFLAGS := -O0
 
-      JVM_PRECOMPILED_HEADER_EXCLUDE += \
-          synchronizer.cpp \
-          #
+    # Needed for clang 16 partial fix to crash in test
+    # compiler/intrinsics/math/TestFpMinMaxIntrinsics.java
+    BUILD_LIBJVM_oop.cpp_CXXFLAGS := -O0
 
+    JVM_PRECOMPILED_HEADER_EXCLUDE += \
+        synchronizer.cpp \
+        oop.cpp \
+        #
+
+    ifneq ($(DEBUG_LEVEL), slowdebug)
       ifeq ($(OPENJDK_TARGET_CPU), x86)
-        # hotspot/jtreg/compiler/c2/Test8062950.java test fails on x86
-        # with clang when parse2.cpp is optimized above -O1
-        BUILD_LIBJVM_parse2.cpp_CXXFLAGS := -O1
+        # needed for clang 13/16
+        BUILD_LIBJVM_parse2.cpp_CXXFLAGS := -O0
+        BUILD_LIBJVM_vmreg_x86.cpp_CXXFLAGS := -O0
 
-        # needed for clang 13
-        BUILD_LIBJVM_vmreg_x86.cpp_CXXFLAGS := -O1
-
         JVM_PRECOMPILED_HEADER_EXCLUDE += \
             parse2.cpp \
             vmreg_x86.cpp \
             #
       endif
       ifeq ($(OPENJDK_TARGET_CPU), x86_64)
-        # needed for clang 13
-        BUILD_LIBJVM_vmreg_x86.cpp_CXXFLAGS := -O1
+        # needed for clang 13/16
+        BUILD_LIBJVM_vmreg_x86.cpp_CXXFLAGS := -O0
 
         JVM_PRECOMPILED_HEADER_EXCLUDE += \
             vmreg_x86.cpp \
