Index: uvloop/loop.pyx
--- uvloop/loop.pyx.orig
+++ uvloop/loop.pyx
@@ -43,7 +43,7 @@ from cpython.pycapsule cimport PyCapsule_New, PyCapsul
 from . import _noop
 
 
-include "includes/consts.pxi"
+
 include "includes/stdlib.pxi"
 
 include "errors.pyx"
@@ -1118,7 +1118,7 @@ cdef class Loop:
 
     cdef _sock_set_reuseport(self, int fd):
         cdef:
-            int err
+            int err = 0
             int reuseport_flag = 1
 
         err = system.setsockopt(
@@ -1131,7 +1131,7 @@ cdef class Loop:
         if err < 0:
             raise convert_error(-errno.errno)
 
-    cdef _set_coroutine_debug(self, bint enabled):
+    cpdef _set_coroutine_debug(self, bint enabled):
         enabled = bool(enabled)
         if self._coroutine_debug_set == enabled:
             return
@@ -1396,8 +1396,7 @@ cdef class Loop:
     def set_debug(self, enabled):
         self._debug = bool(enabled)
         if self.is_running():
-            self.call_soon_threadsafe(
-                self._set_coroutine_debug, self, self._debug)
+             self.call_soon_threadsafe(self._set_coroutine_debug, self._debug)
 
     def is_running(self):
         """Return whether the event loop is currently running."""
@@ -2750,7 +2749,7 @@ cdef class Loop:
                                executable=None,
                                pass_fds=(),
                                # For tests only! Do not use in your code. Ever.
-                               __uvloop_sleep_after_fork=False):
+                               uvloop_sleep_after_fork=False):
 
         # TODO: Implement close_fds (might not be very important in
         # Python 3.5, since all FDs aren't inheritable by default.)
@@ -2770,7 +2769,7 @@ cdef class Loop:
         if executable is not None:
             args[0] = executable
 
-        if __uvloop_sleep_after_fork:
+        if uvloop_sleep_after_fork:
             debug_flags |= __PROCESS_DEBUG_SLEEP_AFTER_FORK
 
         waiter = self._new_future()
