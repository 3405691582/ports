fix unsafe functions sprintf and strcat

Index: cube/cube.c
--- cube/cube.c.orig
+++ cube/cube.c
@@ -451,7 +451,8 @@ VKAPI_ATTR VkBool32 VKAPI_CALL debug_messenger_callbac
                                                         const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData,
                                                         void *pUserData) {
     char prefix[64] = "";
-    char *message = (char *)malloc(strlen(pCallbackData->pMessage) + 5000);
+    size_t message_size = strlen(pCallbackData->pMessage) + 5000;
+    char *message = (char *)malloc(message_size);
     assert(message);
     struct demo *demo = (struct demo *)pUserData;
 
@@ -464,68 +465,68 @@ VKAPI_ATTR VkBool32 VKAPI_CALL debug_messenger_callbac
     }
 
     if (messageSeverity & VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT) {
-        strcat(prefix, "VERBOSE : ");
+        strlcat(prefix, "VERBOSE : ", sizeof(prefix));
     } else if (messageSeverity & VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT) {
-        strcat(prefix, "INFO : ");
+        strlcat(prefix, "INFO : ", sizeof(prefix));
     } else if (messageSeverity & VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT) {
-        strcat(prefix, "WARNING : ");
+        strlcat(prefix, "WARNING : ", sizeof(prefix));
     } else if (messageSeverity & VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT) {
-        strcat(prefix, "ERROR : ");
+        strlcat(prefix, "ERROR : ", sizeof(prefix));
     }
 
     if (messageType & VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT) {
-        strcat(prefix, "GENERAL");
+        strlcat(prefix, "GENERAL", sizeof(prefix));
     } else {
         if (messageType & VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT) {
-            strcat(prefix, "VALIDATION");
+            strlcat(prefix, "VALIDATION", sizeof(prefix));
             validation_error = 1;
         }
         if (messageType & VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT) {
             if (messageType & VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT) {
-                strcat(prefix, "|");
+                strlcat(prefix, "|", sizeof(prefix));
             }
-            strcat(prefix, "PERFORMANCE");
+            strlcat(prefix, "PERFORMANCE", sizeof(prefix));
         }
     }
 
-    sprintf(message, "%s - Message Id Number: %d | Message Id Name: %s\n\t%s\n", prefix, pCallbackData->messageIdNumber,
+    snprintf(message, message_size, "%s - Message Id Number: %d | Message Id Name: %s\n\t%s\n", prefix, pCallbackData->messageIdNumber,
             pCallbackData->pMessageIdName == NULL ? "" : pCallbackData->pMessageIdName, pCallbackData->pMessage);
     if (pCallbackData->objectCount > 0) {
         char tmp_message[500];
-        sprintf(tmp_message, "\n\tObjects - %d\n", pCallbackData->objectCount);
-        strcat(message, tmp_message);
+        snprintf(tmp_message, sizeof(tmp_message), "\n\tObjects - %d\n", pCallbackData->objectCount);
+        strlcat(message, tmp_message, message_size);
         for (uint32_t object = 0; object < pCallbackData->objectCount; ++object) {
-            sprintf(tmp_message, "\t\tObject[%d] - %s", object, string_VkObjectType(pCallbackData->pObjects[object].objectType));
-            strcat(message, tmp_message);
+            snprintf(tmp_message, sizeof(tmp_message), "\t\tObject[%d] - %s", object, string_VkObjectType(pCallbackData->pObjects[object].objectType));
+            strlcat(message, tmp_message, message_size);
 
             VkObjectType t = pCallbackData->pObjects[object].objectType;
             if (t == VK_OBJECT_TYPE_INSTANCE || t == VK_OBJECT_TYPE_PHYSICAL_DEVICE || t == VK_OBJECT_TYPE_DEVICE ||
                 t == VK_OBJECT_TYPE_COMMAND_BUFFER || t == VK_OBJECT_TYPE_QUEUE) {
-                sprintf(tmp_message, ", Handle %p", (void *)(uintptr_t)(pCallbackData->pObjects[object].objectHandle));
-                strcat(message, tmp_message);
+                snprintf(tmp_message, sizeof(tmp_message), ", Handle %p", (void *)(uintptr_t)(pCallbackData->pObjects[object].objectHandle));
+                strlcat(message, tmp_message, message_size);
             } else {
-                sprintf(tmp_message, ", Handle Ox%" PRIx64, (pCallbackData->pObjects[object].objectHandle));
-                strcat(message, tmp_message);
+                snprintf(tmp_message, sizeof(tmp_message), ", Handle Ox%" PRIx64, (pCallbackData->pObjects[object].objectHandle));
+                strlcat(message, tmp_message, message_size);
             }
 
             if (NULL != pCallbackData->pObjects[object].pObjectName && strlen(pCallbackData->pObjects[object].pObjectName) > 0) {
-                sprintf(tmp_message, ", Name \"%s\"", pCallbackData->pObjects[object].pObjectName);
-                strcat(message, tmp_message);
+                snprintf(tmp_message, sizeof(tmp_message), ", Name \"%s\"", pCallbackData->pObjects[object].pObjectName);
+                strlcat(message, tmp_message, message_size);
             }
-            sprintf(tmp_message, "\n");
-            strcat(message, tmp_message);
+            snprintf(tmp_message, sizeof(tmp_message), "\n");
+            strlcat(message, tmp_message, message_size);
         }
     }
     if (pCallbackData->cmdBufLabelCount > 0) {
         char tmp_message[500];
-        sprintf(tmp_message, "\n\tCommand Buffer Labels - %d\n", pCallbackData->cmdBufLabelCount);
-        strcat(message, tmp_message);
+        snprintf(tmp_message, sizeof(tmp_message), "\n\tCommand Buffer Labels - %d\n", pCallbackData->cmdBufLabelCount);
+        strlcat(message, tmp_message, message_size);
         for (uint32_t cmd_buf_label = 0; cmd_buf_label < pCallbackData->cmdBufLabelCount; ++cmd_buf_label) {
-            sprintf(tmp_message, "\t\tLabel[%d] - %s { %f, %f, %f, %f}\n", cmd_buf_label,
+            snprintf(tmp_message, sizeof(tmp_message), "\t\tLabel[%d] - %s { %f, %f, %f, %f}\n", cmd_buf_label,
                     pCallbackData->pCmdBufLabels[cmd_buf_label].pLabelName, pCallbackData->pCmdBufLabels[cmd_buf_label].color[0],
                     pCallbackData->pCmdBufLabels[cmd_buf_label].color[1], pCallbackData->pCmdBufLabels[cmd_buf_label].color[2],
                     pCallbackData->pCmdBufLabels[cmd_buf_label].color[3]);
-            strcat(message, tmp_message);
+            strlcat(message, tmp_message, message_size);
         }
     }
 
