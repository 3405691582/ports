https://github.com/Esri/lerc/commit/215c195fcfc6f41b87a4c62069911e9ea12cf741

Index: src/LercLib/fpl_Lerc2Ext.cpp
--- src/LercLib/fpl_Lerc2Ext.cpp.orig
+++ src/LercLib/fpl_Lerc2Ext.cpp
@@ -31,7 +31,7 @@ Original coding 2021 Yuriy Yakimenko
 
 USING_NAMESPACE_LERC
 
-void _assert(bool v)
+void lerc_assert(bool v)
 {
   if (v == false)
     throw "Assertion failed";
@@ -64,7 +64,7 @@ static void generateListOfTestBlocks(const int width, 
 {
   size_t size = (size_t)width * height;
 
-  _assert(size > 0);
+  lerc_assert(size > 0);
 
   const int block_target_size = 8 * 1024;
 
@@ -613,11 +613,11 @@ bool restoreCrossBytes(std::vector<std::pair<int, char
   //FILE* output,
   const UnitType unit_type, uint8_t** output_block)
 {
-  _assert(predictor == PREDICTOR_NONE || predictor == PREDICTOR_ROWS_COLS);
+  lerc_assert(predictor == PREDICTOR_NONE || predictor == PREDICTOR_ROWS_COLS);
 
   size_t unit_size = output_buffers.size();
 
-  _assert(unit_size == UnitTypes::size(unit_type));
+  lerc_assert(unit_size == UnitTypes::size(unit_type));
 
   const int delta = Predictor::getIntDelta(predictor);
 
@@ -669,11 +669,11 @@ bool restoreByteOrder(std::vector<std::pair<int, char*
   const size_t cols, const size_t rows, const PredictorType predictor, //FILE* output,
   const UnitType unit_type, uint8_t** output_block)
 {
-  _assert(predictor == PREDICTOR_NONE || predictor == PREDICTOR_DELTA1);
+  lerc_assert(predictor == PREDICTOR_NONE || predictor == PREDICTOR_DELTA1);
 
   size_t unit_size = output_buffers.size();
 
-  _assert(unit_size == UnitTypes::size(unit_type));
+  lerc_assert(unit_size == UnitTypes::size(unit_type));
 
   const int delta = Predictor::getIntDelta(predictor);
 
@@ -806,7 +806,7 @@ bool LosslessFPCompression::DecodeHuffmanFltSlice (con
 
     size_t extracted_size = fpl_Compression::extract_buffer((const char *)compressed, compressed_size, expected_size, &uncompressed);
 
-    _assert(expected_size == extracted_size);
+    lerc_assert(expected_size == extracted_size);
 
     free(compressed);
     compressed = NULL;
