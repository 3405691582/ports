Disable pledge for now, x/sys/unix does this by calling syscall() so
this is broken if run on a kernel with syscall() neutered.

If reenabling after an x/sys/unix update, the pledge string needs changing
from upstream's; although the pledge(2) manual implies that wpath might be
enough for chmod, fattr is also needed, i.e. "stdio rpath wpath cpath fattr
tty proc exec".

N.B. using pledge breaks "gopass otp -s". If X is running, this reads the
screen looking for a QR code containing an otpauth URL. This requires
"inet" when DISPLAY is remote but cannot be used at all with pledge if
DISPLAY is local ("unix" allows accessing the socket, but then shmget
is used - via syscall() - regardless of use of syscall here, this is
not permitted by any pledge).

There may be other codepaths that end up calling syscall() but I haven't
triggered them in my normal use of this yet.

Index: main.go
--- main.go.orig
+++ main.go
@@ -33,7 +33,6 @@ import (
 	"github.com/gopasspw/gopass/internal/store/leaf"
 	"github.com/gopasspw/gopass/pkg/ctxutil"
 	"github.com/gopasspw/gopass/pkg/debug"
-	"github.com/gopasspw/gopass/pkg/protect"
 	"github.com/gopasspw/gopass/pkg/termio"
 	colorable "github.com/mattn/go-colorable"
 	"github.com/mattn/go-isatty"
@@ -52,9 +51,5 @@ func main() {
 	// Example: https://go.dev/play/p/8214zCX6hVq.
 	defer writeCPUProfile()()
 
-	if err := protect.Pledge("stdio rpath wpath cpath tty proc exec"); err != nil {
-		panic(err)
-	}
-
 	ctx := context.Background()
 
