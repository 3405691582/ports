use pledge(2)

Index: src/main.rs
--- src/main.rs.orig
+++ src/main.rs
@@ -14,6 +14,8 @@ use log::{info, trace, LevelFilter};
 use std::fs;
 use structopt::StructOpt;
 use tokio::runtime::Runtime;
+#[cfg(target_os = "openbsd")]
+use pledge::pledge;
 
 #[cfg(feature = "alsa_backend")]
 mod alsa_mixer;
@@ -85,6 +87,11 @@ fn setup_logger(log_target: LogTarget, verbose: bool) 
 }
 
 fn main() -> eyre::Result<()> {
+    // Start with superset of all potential promises.
+    // Drop later after CLI arguments and configuration files were parsed.
+    #[cfg(target_os = "openbsd")]
+    pledge("stdio rpath wpath cpath inet mcast flock chown unix dns proc exec audio", None).unwrap();
+
     color_eyre::install().wrap_err("Couldn't initialize error reporting")?;
 
     let mut cli_config: CliConfig = CliConfig::from_args();
@@ -165,6 +172,34 @@ fn main() -> eyre::Result<()> {
             exit(0);
         }
     }
+
+    #[cfg(target_os = "openbsd")]
+    {
+        // At this point:
+        //   * --username-cmd, --password-cmd were handled
+        //     => no "proc exec"
+        //   * --pid, daemon(3) were handled
+        //     => no "cpath flock chown" for PID file
+        //     => no "proc" for double-fork(2)
+        //
+        // "stdio"      stdout/err, syslog(3)
+        // "[rwc]path"  ${TMPDIR}/.tmp* and cache
+        // "inet dns"   Internet, Spotify 
+        // "unix audio" D-Bus, sndio(7)
+        // "mcast"      Zeroconf Discovery
+        //
+        // Second and final pledge before runtime starts.
+        // "mcast" could go if a) username is given and b) password/keyring worked.
+
+        // --on-song-change-hook aka. "onevent"
+        // always run through --shell aka. "shell", defaults to "sh"
+        if internal_config.onevent.is_some() {
+            pledge("stdio rpath wpath cpath inet mcast unix dns proc exec audio", None).unwrap();
+        } else {
+            pledge("stdio rpath wpath cpath inet mcast unix dns audio", None).unwrap();
+        }
+    }
+
 
     let runtime = Runtime::new().unwrap();
     runtime.block_on(async {
