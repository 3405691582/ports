Index: src/3rdparty/chromium/third_party/ffmpeg/chromium/scripts/build_ffmpeg.py
--- src/3rdparty/chromium/third_party/ffmpeg/chromium/scripts/build_ffmpeg.py.orig
+++ src/3rdparty/chromium/third_party/ffmpeg/chromium/scripts/build_ffmpeg.py
@@ -25,7 +25,7 @@ NDK_ROOT_DIR = os.path.abspath(
     os.path.join(CHROMIUM_ROOT_DIR, 'third_party', 'android_ndk'))
 
 sys.path.append(os.path.join(CHROMIUM_ROOT_DIR, 'build'))
-import gn_helpers
+#import gn_helpers
 
 BRANDINGS = [
     'Chrome',
@@ -39,7 +39,10 @@ ARCH_MAP = {
         'ia32', 'x64', 'mipsel', 'mips64el', 'noasm-x64', 'arm', 'arm-neon',
         'arm64'
     ],
+    'openbsd': ['x64', 'arm64', 'ia32'],
+    'freebsd': ['x64', 'arm64', 'ia32'],
     'mac': ['x64', 'arm64'],
+    'mac': ['x64', 'arm64'],
     'win': ['ia32', 'x64', 'arm64'],
 }
 
@@ -48,6 +51,8 @@ USAGE_END = """
 Valid combinations are android     [%(android)s]
                        linux       [%(linux)s]
                        mac         [%(mac)s]
+                       openbsd     [%(openbsd)s]
+                       freebsd     [%(freebsd)s]
                        win         [%(win)s]
 
 If no target architecture is specified all will be built.
@@ -120,6 +125,10 @@ def PrintAndCheckCall(argv, *args, **kwargs):
 def DetermineHostOsAndArch():
   if platform.system() == 'Linux':
     host_os = 'linux'
+  if platform.system() == 'OpenBSD':
+    host_os = 'openbsd'
+  elif platform.system() == 'FreeBSD':
+    host_os = 'freebsd'
   elif platform.system() == 'Darwin':
     host_os = 'mac'
   elif platform.system() == 'Windows' or 'CYGWIN_NT' in platform.system():
@@ -129,7 +138,7 @@ def DetermineHostOsAndArch():
 
   if re.match(r'i.86', platform.machine()):
     host_arch = 'ia32'
-  elif platform.machine() == 'x86_64' or platform.machine() == 'AMD64':
+  elif platform.machine() == 'x86_64' or platform.machine() == 'AMD64' or platform.machine() == 'amd64':
     host_arch = 'x64'
   elif platform.machine() == 'aarch64':
     host_arch = 'arm64'
@@ -146,7 +155,7 @@ def DetermineHostOsAndArch():
 
 
 def GetDsoName(target_os, dso_name, dso_version):
-  if target_os in ('linux', 'linux-noasm', 'android'):
+  if target_os in ('linux', 'linux-noasm', 'android', 'openbsd', 'freebsd'):
     return 'lib%s.so.%s' % (dso_name, dso_version)
   elif target_os == 'mac':
     return 'lib%s.%s.dylib' % (dso_name, dso_version)
@@ -418,7 +427,7 @@ def BuildFFmpeg(target_os, target_arch, host_os, host_
   # Linux configs is also used on Fuchsia. They are mostly compatible with
   # Fuchsia except that Fuchsia doesn't support sysctl(). On Linux sysctl()
   # isn't actually used, so it's safe to set HAVE_SYSCTL to 0.
-  if target_os == 'linux':
+  if target_os in ['linux', 'linux-noasm', 'openbsd', 'freebsd']:
     pre_make_rewrites += [
         (r'(#define HAVE_SYSCTL [01])',
          r'#define HAVE_SYSCTL 0 /* \1 -- forced to 0 for Fuchsia */')
@@ -537,7 +546,7 @@ def main(argv):
   configure_args = args[2:]
 
 
-  if target_os not in ('android', 'linux', 'linux-noasm', 'mac', 'win', 'all'):
+  if target_os not in ('android', 'linux', 'linux-noasm', 'mac', 'win', 'all', 'openbsd', 'freebsd'):
     parser.print_help()
     return 1
 
@@ -577,8 +586,7 @@ def main(argv):
 
 def ConfigureAndBuild(target_arch, target_os, host_os, host_arch, parallel_jobs,
                       configure_args, options):
-  if target_os == 'linux' and target_arch == 'noasm-x64':
-    target_os = 'linux-noasm'
+  if target_os in ('linux', 'linux-noasm', 'android', 'openbsd', 'freebsd'):
     target_arch = 'x64'
 
   configure_flags = collections.defaultdict(list)
@@ -749,7 +757,7 @@ def ConfigureAndBuild(target_arch, target_os, host_os,
               '--extra-cflags=-mfpu=vfpv3-d16',
           ])
     elif target_arch == 'arm64':
-      if target_os != 'android':
+      if target_os != 'android' and target_os != 'openbsd' and target_os != 'freebsd':
         configure_flags['Common'].extend([
             '--enable-cross-compile',
             '--cross-prefix=/usr/bin/aarch64-linux-gnu-',
@@ -964,7 +972,7 @@ def ConfigureAndBuild(target_arch, target_os, host_os,
         'Chrome', configure_flags['Common'] + configure_flags['ChromeAndroid'] +
         configure_args)
 
-  if target_os in ['linux', 'linux-noasm']:
+  if target_os in ['linux', 'linux-noasm', 'openbsd', 'freebsd']:
     # ChromeOS enables MPEG4 which requires error resilience :(
     chrome_os_flags = (
         configure_flags['Common'] + configure_flags['Chrome'] +
