disable encrypted communication functionality

Index: kitty/remote_control.py
--- kitty/remote_control.py.orig
+++ kitty/remote_control.py
@@ -19,7 +19,7 @@ from .cli import emph, parse_args
 from .cli_stub import RCOptions
 from .constants import RC_ENCRYPTION_PROTOCOL_VERSION, appname, version
 from .fast_data_types import (
-    AES256GCMDecrypt, AES256GCMEncrypt, EllipticCurveKey, get_boss,
+    get_boss,
     get_options, read_command_response, send_data_to_peer
 )
 from .rc.base import (
@@ -39,7 +39,7 @@ def encode_response_for_peer(response: Any) -> bytes:
     return b'\x1bP@kitty-cmd' + json.dumps(response).encode('utf-8') + b'\x1b\\'
 
 
-def parse_cmd(serialized_cmd: str, encryption_key: EllipticCurveKey) -> Dict[str, Any]:
+def parse_cmd(serialized_cmd: str, encryption_key: '') -> Dict[str, Any]:
     try:
         pcmd = json.loads(serialized_cmd)
     except Exception:
@@ -48,6 +48,8 @@ def parse_cmd(serialized_cmd: str, encryption_key: Ell
         return {}
     pcmd.pop('password', None)
     if 'encrypted' in pcmd:
+        raise NotImplementedError("encrypted communication disabled on OpenBSD")
+        """
         if pcmd.get('enc_proto', '1') != RC_ENCRYPTION_PROTOCOL_VERSION:
             log_error(f'Ignoring encrypted rc command with unsupported protocol: {pcmd.get("enc_proto")}')
             return {}
@@ -65,6 +67,7 @@ def parse_cmd(serialized_cmd: str, encryption_key: Ell
                 f'Ignoring encrypted rc command with timestamp {delta / 1e9:.1f} seconds from now.'
                 ' Could be an attempt at a replay attack or an incorrect clock on a remote machine.')
             return {}
+        """
     return pcmd
 
 
