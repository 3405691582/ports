Revert part of https://github.com/polybar/polybar/pull/2958

Index: include/cairo/context.hpp
--- include/cairo/context.hpp.orig
+++ include/cairo/context.hpp
@@ -5,7 +5,6 @@
 #include <algorithm>
 #include <cmath>
 #include <deque>
-#include <iomanip>
 #include <iterator>
 
 #include "cairo/font.hpp"
@@ -170,14 +169,8 @@ namespace cairo {
 
       // The conversion already removed any invalid chunks. We should probably log a warning though.
       if (!valid) {
-        sstream hex;
-        hex << std::hex << std::setw(2) << std::setfill('0');
-
-        for(const char& c: utf8) {
-          hex << (static_cast<int>(c) & 0xff) << " ";
-        }
-
-        m_log.warn("Dropping invalid parts of UTF8 text '%s' %s", utf8, hex.to_string());
+        m_log.warn("Dropping invalid UTF8 text '%s'", utf8);
+        return *this;
       }
 
       while (!chars.empty()) {
@@ -247,9 +240,9 @@ namespace cairo {
           continue;
         }
 
-        std::array<char, 5> unicode{};
+        char unicode[6]{'\0'};
         string_util::ucs4_to_utf8(unicode, chars.begin()->codepoint);
-        m_log.warn("Dropping unmatched character '%s' (U+%04x) in '%s'", unicode.data(), chars.begin()->codepoint, t.contents);
+        m_log.warn("Dropping unmatched character %s (U+%04x) in '%s'", unicode, chars.begin()->codepoint, t.contents);
         utf8.erase(chars.begin()->offset, chars.begin()->length);
         for (auto&& c : chars) {
           c.offset -= chars.begin()->length;
