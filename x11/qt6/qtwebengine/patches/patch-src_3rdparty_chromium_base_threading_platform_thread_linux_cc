Index: src/3rdparty/chromium/base/threading/platform_thread_linux.cc
--- src/3rdparty/chromium/base/threading/platform_thread_linux.cc.orig
+++ src/3rdparty/chromium/base/threading/platform_thread_linux.cc
@@ -31,7 +31,9 @@
 #include "third_party/abseil-cpp/absl/types/optional.h"
 
 #include <pthread.h>
-#include <sys/prctl.h>
+#if !BUILDFLAG(IS_BSD)
+ #include <sys/prctl.h>
+#endif
 #include <sys/resource.h>
 #include <sys/time.h>
 #include <sys/types.h>
@@ -43,8 +45,10 @@ namespace {
 
 ThreadTypeDelegate* g_thread_type_delegate = nullptr;
 
+#if !BUILDFLAG(IS_BSD)
 const FilePath::CharType kCgroupDirectory[] =
     FILE_PATH_LITERAL("/sys/fs/cgroup");
+#endif
 
 FilePath ThreadTypeToCgroupDirectory(const FilePath& cgroup_filepath,
                                      ThreadType thread_type) {
@@ -126,8 +130,12 @@ const ThreadTypeToNiceValuePair kThreadTypeToNiceValue
 bool CanSetThreadTypeToRealtimeAudio() {
   // A non-zero soft-limit on RLIMIT_RTPRIO is required to be allowed to invoke
   // pthread_setschedparam in SetCurrentThreadTypeForPlatform().
+#if !BUILDFLAG(IS_BSD)
   struct rlimit rlim;
   return getrlimit(RLIMIT_RTPRIO, &rlim) != 0 && rlim.rlim_cur != 0;
+#else
+  return false;
+#endif
 }
 
 bool SetCurrentThreadTypeForPlatform(ThreadType thread_type,
@@ -139,12 +147,15 @@ bool SetCurrentThreadTypeForPlatform(ThreadType thread
     return true;
   }
 
+#if !BUILDFLAG(IS_BSD)
   PlatformThread::SetThreadType(getpid(), tid, thread_type);
+#endif
   return true;
 }
 
 absl::optional<ThreadPriorityForTest>
 GetCurrentThreadPriorityForPlatformForTest() {
+#if !BUILDFLAG(IS_BSD)
   int maybe_sched_rr = 0;
   struct sched_param maybe_realtime_prio = {0};
   if (pthread_getschedparam(pthread_self(), &maybe_sched_rr,
@@ -154,6 +165,7 @@ GetCurrentThreadPriorityForPlatformForTest() {
           PlatformThreadLinux::kRealTimePrio.sched_priority) {
     return absl::make_optional(ThreadPriorityForTest::kRealtimeAudio);
   }
+#endif
   return absl::nullopt;
 }
 
@@ -162,6 +174,8 @@ GetCurrentThreadPriorityForPlatformForTest() {
 void PlatformThreadBase::SetName(const std::string& name) {
   SetNameCommon(name);
 
+#if !BUILDFLAG(IS_BSD)
+  int maybe_sched_rr = 0;
   // On linux we can get the thread names to show up in the debugger by setting
   // the process name for the LWP.  We don't want to do this for the main
   // thread because that would rename the process, causing tools like killall
@@ -178,6 +192,7 @@ void PlatformThreadBase::SetName(const std::string& na
   // We expect EPERM failures in sandboxed processes, just ignore those.
   if (err < 0 && errno != EPERM)
     DPLOG(ERROR) << "prctl(PR_SET_NAME)";
+#endif
 }
 
 // static
@@ -193,6 +208,7 @@ void PlatformThreadLinux::SetThreadTypeDelegate(Thread
 void PlatformThreadLinux::SetThreadCgroupsForThreadType(
     PlatformThreadId thread_id,
     ThreadType thread_type) {
+#if !BUILDFLAG(IS_BSD)
   FilePath cgroup_filepath(kCgroupDirectory);
   SetThreadCgroupForThreadType(
       thread_id, cgroup_filepath.Append(FILE_PATH_LITERAL("cpuset")),
@@ -200,13 +216,16 @@ void PlatformThreadLinux::SetThreadCgroupsForThreadTyp
   SetThreadCgroupForThreadType(
       thread_id, cgroup_filepath.Append(FILE_PATH_LITERAL("schedtune")),
       thread_type);
+#endif
 }
 
 // static
 void PlatformThreadLinux::SetThreadType(ProcessId process_id,
                                         PlatformThreadId thread_id,
                                         ThreadType thread_type) {
+#if !BUILDFLAG(IS_BSD)
   SetThreadCgroupsForThreadType(thread_id, thread_type);
+#endif
 
   // Some scheduler syscalls require thread ID of 0 for current thread.
   // This prevents us from requiring to translate the NS TID to
