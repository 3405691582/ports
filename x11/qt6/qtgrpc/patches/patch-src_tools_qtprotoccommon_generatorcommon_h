https://github.com/qt/qtgrpc/commit/514769d1bd595d0e54bbe34c0bd167636d4825dc

Index: src/tools/qtprotoccommon/generatorcommon.h
--- src/tools/qtprotoccommon/generatorcommon.h.orig
+++ src/tools/qtprotoccommon/generatorcommon.h
@@ -64,9 +64,9 @@ struct common {
             }
         }
 
-        return getFullNamespace(type->file()->package() + nestingNamespaces + '.' + type->name(),
-                                separator,
-                                common::isExtraNamespacedFile(std::string(type->file()->name())));
+        return getFullNamespace(std::string{ type->file()->package() } + nestingNamespaces + '.'
+                                    + std::string{ type->name() },
+                                separator, common::isExtraNamespacedFile(type->file()->name()));
     }
 
     template<typename T>
@@ -123,8 +123,8 @@ struct common {
     static TypeMap produceClientTypeMap(const ServiceDescriptor *service, const Descriptor *scope);
     static TypeMap produceQmlClientTypeMap(const ServiceDescriptor *service,
                                            const Descriptor *scope);
-    static std::string qualifiedCppName(const std::string &name);
-    static std::string qualifiedQmlName(const std::string &name);
+    static std::string qualifiedCppName(std::string_view name);
+    static std::string qualifiedQmlName(std::string_view name);
     static bool isOneofField(const FieldDescriptor *field);
     static bool isOptionalField(const FieldDescriptor *field);
     static bool isTriviallyCopyable(const FieldDescriptor *field);
@@ -155,7 +155,7 @@ struct common {
 
     static std::string collectFieldFlags(const google::protobuf::FieldDescriptor *field);
 
-    static bool isExtraNamespacedFile(const std::string &file);
+    static bool isExtraNamespacedFile(std::string_view file);
     static void setExtraNamespacedFiles(const std::set<std::string> &files);
 
     static std::string headerGuardFromFilename(std::string fileName);
