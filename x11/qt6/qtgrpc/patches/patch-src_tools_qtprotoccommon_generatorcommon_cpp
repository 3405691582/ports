https://github.com/qt/qtgrpc/commit/514769d1bd595d0e54bbe34c0bd167636d4825dc

Index: src/tools/qtprotoccommon/generatorcommon.cpp
--- src/tools/qtprotoccommon/generatorcommon.cpp.orig
+++ src/tools/qtprotoccommon/generatorcommon.cpp
@@ -98,7 +98,7 @@ std::string common::buildExportMacro(bool addTrailingS
 std::string common::getNestedNamespace(const Descriptor *type, std::string_view separator)
 {
     assert(type != nullptr);
-    std::string namespaces = type->file()->package();
+    std::string namespaces{ type->file()->package() };
 
     std::string nestingNamespaces;
     const Descriptor *containingType = type->containing_type();
@@ -147,11 +147,10 @@ std::map<std::string, std::string> common::getNestedSc
 
 TypeMap common::produceQtTypeMap(const Descriptor *type, const Descriptor *scope)
 {
-    std::string namespaces = getFullNamespace(type, "::");
     std::string scopeNamespaces = getScopeNamespace(type, scope);
     std::string qmlPackage = getFullNamespace(type, ".");
 
-    std::string name = type->name();
+    std::string name{ type->name() };
     std::string fullName = name;
     std::string scopeName = name;
 
@@ -176,7 +175,7 @@ TypeMap common::produceOverriddenTypeMap(const Descrip
     std::string namespaces = getFullNamespace(type, "::");
     std::string qmlPackage = getFullNamespace(type, ".");
 
-    std::string name = type->name();
+    std::string name{ type->name() };
     std::string listName;
     if (type->full_name() == "google.protobuf.Any") {
         namespaces = "QtProtobuf";
@@ -340,18 +339,15 @@ TypeMap common::produceSimpleTypeMap(FieldDescriptor::
 
 MethodMap common::produceMethodMap(const MethodDescriptor *method, const std::string &scope)
 {
-    std::string inputTypeName = method->input_type()->full_name();
-    std::string outputTypeName = method->output_type()->full_name();
-    std::string methodName = method->name();
-    std::string methodNameUpper = method->name();
+    std::string inputTypeName{ utils::replace(method->input_type()->full_name(), ".", "::") };
+    std::string outputTypeName{ utils::replace(method->output_type()->full_name(), ".", "::")  };
+    std::string methodName{ method->name() };
+    std::string methodNameUpper{ method->name() };
     methodNameUpper[0] = static_cast<char>(utils::toAsciiUpper(methodNameUpper[0]));
-    inputTypeName = utils::replace(inputTypeName, ".", "::");
-    outputTypeName = utils::replace(outputTypeName, ".", "::");
 
-    std::string senderName = methodNameUpper;
-    senderName += "Sender";
+    std::string senderName = std::move(methodNameUpper) + "Sender";
 
-    std::string serviceName = method->service()->name();
+    std::string serviceName{ method->service()->name() };
 
     //Make sure that we don't clash the same stream names from different services
     std::string senderQmlName = serviceName;
@@ -389,9 +385,9 @@ MethodMap common::produceMethodMap(const MethodDescrip
 
 TypeMap common::produceServiceTypeMap(const ServiceDescriptor *service, const Descriptor *scope)
 {
-    const std::string name = "Service";
-    const std::string fullName = "Service";
-    const std::string scopeName = service->name();
+    const std::string name{ "Service" };
+    const std::string fullName{ "Service" };
+    const std::string scopeName{ service->name() };
     static const std::string exportMacro = common::buildExportMacro();
 
     const std::string namespaces = getFullNamespace(service, "::");
@@ -409,16 +405,16 @@ TypeMap common::produceServiceTypeMap(const ServiceDes
 
 TypeMap common::produceClientTypeMap(const ServiceDescriptor *service, const Descriptor *scope)
 {
-    const std::string name = "Client";
-    const std::string fullName = "Client";
-    const std::string scopeName = service->name();
+    const std::string name{ "Client" };
+    const std::string fullName{ "Client" };
+    const std::string scopeName{ service->name() };
     static const std::string exportMacro = common::buildExportMacro();
 
     const std::string namespaces = getFullNamespace(service, "::");
     const std::string scopeNamespaces = getScopeNamespace(namespaces,
                                                           getFullNamespace(scope, "::"));
 
-    const std::string serviceName =  service->full_name();
+    const std::string serviceName{ service->full_name() };
     return { { "classname", name },
              { "classname_low_case", utils::deCapitalizeAsciiName(name) },
              { "full_type", fullName },
@@ -431,9 +427,9 @@ TypeMap common::produceClientTypeMap(const ServiceDesc
 
 TypeMap common::produceQmlClientTypeMap(const ServiceDescriptor *service, const Descriptor *scope)
 {
-    const std::string name = "QmlClient";
-    const std::string fullName = "QmlClient";
-    const std::string serviceName = service->name();
+    const std::string name{ "QmlClient" };
+    const std::string fullName{ "QmlClient" };
+    const std::string serviceName{ service->name() };
     static const std::string exportMacro = common::buildExportMacro();
 
     const std::string namespaces = getFullNamespace(service, "::");
@@ -597,12 +593,13 @@ PropertyMap common::producePropertyMap(const FieldDesc
     return propertyMap;
 }
 
-std::string common::qualifiedCppName(const std::string &name)
+std::string common::qualifiedCppName(std::string_view name)
 {
-    return utils::contains(CommonTemplates::ListOfCppExceptions(), name) ? name + "_" : name;
+    return utils::contains(CommonTemplates::ListOfCppExceptions(), name) ? std::string{ name } + "_"
+                                                                         : std::string{ name };
 }
 
-std::string common::qualifiedQmlName(const std::string &name)
+std::string common::qualifiedQmlName(std::string_view name)
 {
     std::string fieldName(name);
     const std::vector<std::string> &searchExceptions = CommonTemplates::ListOfQmlExceptions();
@@ -799,9 +796,9 @@ std::string common::collectFieldFlags(const FieldDescr
     return flags;
 }
 
-bool common::isExtraNamespacedFile(const std::string &file)
+bool common::isExtraNamespacedFile(std::string_view file)
 {
-    return m_extraNamespacedFiles.find(file) != m_extraNamespacedFiles.end();
+    return m_extraNamespacedFiles.find(std::string{ file }) != m_extraNamespacedFiles.end();
 }
 
 void common::setExtraNamespacedFiles(const std::set<std::string> &files)
