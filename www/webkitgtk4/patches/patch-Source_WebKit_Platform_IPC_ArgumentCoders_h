https://bugs.webkit.org/show_bug.cgi?id=245044
REVERT:
From: "zan@falconsigh.net" <zan@falconsigh.net@268f45cc-cd09-0410-ab3c-d52691b4dbfc>
Date: Tue, 12 Apr 2022 06:30:51 +0000
Subject: [PATCH] [WK2] Simplify IPC encoding, decoding of tuples https://bugs.webkit.org/show_bug.cgi?id=239062

Index: Source/WebKit/Platform/IPC/ArgumentCoders.h
--- Source/WebKit/Platform/IPC/ArgumentCoders.h.orig
+++ Source/WebKit/Platform/IPC/ArgumentCoders.h
@@ -495,26 +495,38 @@ template<typename T> struct ArgumentCoder<Ref<T>> {
     }
 };
 
-template<typename... Elements>
+template<size_t index, typename... Elements>
 struct TupleEncoder {
     template<typename Encoder>
     static void encode(Encoder& encoder, const std::tuple<Elements...>& tuple)
     {
-        encode(encoder, tuple, std::index_sequence_for<Elements...> { });
+        encoder << std::get<sizeof...(Elements) - index>(tuple);
+        TupleEncoder<index - 1, Elements...>::encode(encoder, tuple);
     }
+};
 
-    template<typename Encoder, size_t... Indices>
-    static void encode(Encoder& encoder, const std::tuple<Elements...>& tuple, std::index_sequence<Indices...>)
+template<typename... Elements>
+struct TupleEncoder<0, Elements...> {
+    template<typename Encoder>
+    static void encode(Encoder&, const std::tuple<Elements...>&)
     {
-        if constexpr (sizeof...(Indices) > 0)
-            (encoder << ... << std::get<Indices>(tuple));
     }
 };
 
-template<typename... Elements> struct TupleDecoder;
+template <typename T, typename... Elements, size_t... Indices>
+auto tupleFromTupleAndObject(T&& object, std::tuple<Elements...>&& tuple, std::index_sequence<Indices...>)
+{
+    return std::make_tuple(WTFMove(object), WTFMove(std::get<Indices>(tuple))...);
+}
 
+template <typename T, typename... Elements>
+auto tupleFromTupleAndObject(T&& object, std::tuple<Elements...>&& tuple)
+{
+    return tupleFromTupleAndObject(WTFMove(object), WTFMove(tuple), std::index_sequence_for<Elements...>());
+}
+
 template<typename Type, typename... Types>
-struct TupleDecoder<Type, Types...> {
+struct TupleDecoderImpl {
     template<typename Decoder>
     static std::optional<std::tuple<Type, Types...>> decode(Decoder& decoder)
     {
@@ -523,16 +535,38 @@ struct TupleDecoder<Type, Types...> {
         if (!optional)
             return std::nullopt;
 
-        std::optional<std::tuple<Types...>> remainder = TupleDecoder<Types...>::decode(decoder);
-        if (!remainder)
+        std::optional<std::tuple<Types...>> subTuple = TupleDecoderImpl<Types...>::decode(decoder);
+        if (!subTuple)
             return std::nullopt;
 
-        return std::tuple_cat(std::make_tuple(WTFMove(*optional)), WTFMove(*remainder));
+        return tupleFromTupleAndObject(WTFMove(*optional), WTFMove(*subTuple));
     }
 };
 
+template<typename Type>
+struct TupleDecoderImpl<Type> {
+    template<typename Decoder>
+    static std::optional<std::tuple<Type>> decode(Decoder& decoder)
+    {
+        std::optional<Type> optional;
+        decoder >> optional;
+        if (!optional)
+            return std::nullopt;
+        return std::make_tuple(WTFMove(*optional));
+    }
+};
+
+template<size_t size, typename... Elements>
+struct TupleDecoder {
+    template<typename Decoder>
+    static std::optional<std::tuple<Elements...>> decode(Decoder& decoder)
+    {
+        return TupleDecoderImpl<Elements...>::decode(decoder);
+    }
+};
+
 template<>
-struct TupleDecoder<> {
+struct TupleDecoder<0> {
     template<typename Decoder>
     static std::optional<std::tuple<>> decode(Decoder&)
     {
@@ -544,13 +578,13 @@ template<typename... Elements> struct ArgumentCoder<st
     template<typename Encoder>
     static void encode(Encoder& encoder, const std::tuple<Elements...>& tuple)
     {
-        TupleEncoder<Elements...>::encode(encoder, tuple);
+        TupleEncoder<sizeof...(Elements), Elements...>::encode(encoder, tuple);
     }
 
     template<typename Decoder>
     static std::optional<std::tuple<Elements...>> decode(Decoder& decoder)
     {
-        return TupleDecoder<Elements...>::decode(decoder);
+        return TupleDecoder<sizeof...(Elements), Elements...>::decode(decoder);
     }
 };
 
