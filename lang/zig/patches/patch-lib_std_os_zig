msync: https://github.com/ziglang/zig/pull/18701

Index: lib/std/os.zig
--- lib/std/os.zig.orig
+++ lib/std/os.zig
@@ -4416,11 +4416,13 @@ pub fn munmap(memory: []align(mem.page_size) const u8)
 
 pub const MSyncError = error{
     UnmappedMemory,
+    AccessDenied,
 } || UnexpectedError;
 
 pub fn msync(memory: []align(mem.page_size) u8, flags: i32) MSyncError!void {
     switch (errno(system.msync(memory.ptr, memory.len, flags))) {
         .SUCCESS => return,
+        .PERM => return error.AccessDenied,
         .NOMEM => return error.UnmappedMemory, // Unsuccessful, provided pointer does not point mapped memory
         .INVAL => unreachable, // Invalid parameters.
         else => unreachable,
@@ -5303,6 +5305,9 @@ pub fn getFdPath(fd: fd_t, out_buffer: *[MAX_PATH_BYTE
             const len = mem.indexOfScalar(u8, out_buffer[0..], @as(u8, 0)) orelse MAX_PATH_BYTES;
             return out_buffer[0..len];
         },
+        .openbsd => {
+            return error.FileNotFound;
+        },
         else => @compileError("querying for canonical path of a handle is unsupported on this host"),
     }
 }
@@ -7038,7 +7043,7 @@ pub const MadviseError = error{
 pub fn madvise(ptr: [*]align(mem.page_size) u8, length: usize, advice: u32) MadviseError!void {
     switch (errno(system.madvise(ptr, length, advice))) {
         .SUCCESS => return,
-        .ACCES => return error.AccessDenied,
+        .PERM, .ACCES => return error.AccessDenied,
         .AGAIN => return error.SystemResources,
         .BADF => unreachable, // The map exists, but the area maps something that isn't a file.
         .INVAL => return error.InvalidSyscall,
