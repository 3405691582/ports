Index: src/os/signal/signal_cgo_test.go
--- src/os/signal/signal_cgo_test.go.orig
+++ src/os/signal/signal_cgo_test.go
@@ -14,6 +14,7 @@ import (
 	"context"
 	"encoding/binary"
 	"fmt"
+	"internal/syscall/unix"
 	"internal/testpty"
 	"os"
 	"os/exec"
@@ -263,15 +264,14 @@ func runSessionLeader(pause time.Duration) {
 
 		// Wait for stop.
 		var status syscall.WaitStatus
-		var errno syscall.Errno
 		for {
-			_, _, errno = syscall.Syscall6(syscall.SYS_WAIT4, uintptr(cmd.Process.Pid), uintptr(unsafe.Pointer(&status)), syscall.WUNTRACED, 0, 0, 0)
-			if errno != syscall.EINTR {
+			_, err = syscall.Wait4(cmd.Process.Pid, &status, syscall.WUNTRACED, nil)
+			if err != syscall.EINTR {
 				break
 			}
 		}
-		if errno != 0 {
-			return fmt.Errorf("error waiting for stop: %w", errno)
+		if err != nil {
+			return fmt.Errorf("error waiting for stop: %w", err)
 		}
 
 		if !status.Stopped() {
@@ -280,9 +280,8 @@ func runSessionLeader(pause time.Duration) {
 
 		// Take TTY.
 		pgrp := int32(syscall.Getpgrp()) // assume that pid_t is int32
-		_, _, errno = syscall.Syscall(syscall.SYS_IOCTL, ptyFD, syscall.TIOCSPGRP, uintptr(unsafe.Pointer(&pgrp)))
-		if errno != 0 {
-			return fmt.Errorf("error setting tty process group: %w", errno)
+		if err := unix.Ioctl(ptyFD, syscall.TIOCSPGRP, unsafe.Pointer(&pgrp)); err != nil {
+			return fmt.Errorf("error setting tty process group: %w", err)
 		}
 
 		// Give the kernel time to potentially wake readers and have
@@ -291,9 +290,8 @@ func runSessionLeader(pause time.Duration) {
 
 		// Give TTY back.
 		pid := int32(cmd.Process.Pid) // assume that pid_t is int32
-		_, _, errno = syscall.Syscall(syscall.SYS_IOCTL, ptyFD, syscall.TIOCSPGRP, uintptr(unsafe.Pointer(&pid)))
-		if errno != 0 {
-			return fmt.Errorf("error setting tty process group back: %w", errno)
+		if err := unix.Ioctl(ptyFD, syscall.TIOCSPGRP, unsafe.Pointer(&pid)); err != nil {
+			return fmt.Errorf("error setting tty process group back: %w", err)
 		}
 
 		// Report that we are done and SIGCONT can be sent. Note that
